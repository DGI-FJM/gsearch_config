# $Id: index.properties 6569 2008-02-08 15:16:13Z gertsp $

# Properties for the DemoOnSolr index

fgsindex.indexName					= gsearch_solr

fgsindex.operationsImpl				= dk.defxws.fgssolr.OperationsImpl

fgsindex.defaultUpdateIndexDocXslt		= basicFoxmlToSolr
fgsindex.defaultUpdateIndexResultXslt	= updateIndexToResultPage
fgsindex.defaultGfindObjectsResultXslt	= gfindObjectsToResultPage
fgsindex.defaultBrowseIndexResultXslt	= browseIndexToResultPage
fgsindex.defaultGetIndexInfoResultXslt	= copyXml

#fgsindex.indexBase    = http://localhost:8983/solr # the Solr server base url
fgsindex.indexBase    = http://localhost:8080/solr/default

#fgsindex.indexDir				= <...> The directory must exist, it is used for browseIndex and gfindObjects
fgsindex.indexDir				= /usr/local/fedora/gsearch_solr/solr/default/data/index

# the next two properties have their counterpart in the Solr config file schema.xml,
# make sure they match, else you get different search behaviour from the same query
# sent to Solr versus sent to GSearch.
fgsindex.analyzer				= org.apache.lucene.analysis.standard.StandardAnalyzer
fgsindex.defaultQueryFields		= dc.description dc.title

# for queries sent to Solr, sorting is determined in the Solr config files
# for queries sent to  GSearch, sortFields may be given as parameter to gfindObjects, or as config default.
###########

# as parameter:			?operation=gfindObjects&sortFields=[sortFieldsValue]&...

# as config default:

#fgsindex.defaultSortFields			= sortFieldsValue

#examples:

#fgsindex.defaultSortFields			= PID,AUTO,true

#fgsindex.defaultSortFields			= sf1,SCORE;sf2,cy-GB-var,true

#fgsindex.defaultSortFields			= dc.title,dk.defxws.fedoragsearch.test.ComparatorSourceTest"
#fgsindex.defaultSortFields			= dc.title,dk.defxws.fedoragsearch.test.ComparatorSourceTest(1-9)"

#    sortFieldsValue	::= [sortField[';'sortField]*]
#    sortField  		::= sortFieldName[','(sortType | locale | comparatorClass)[','reverse]]]]
#    sortFieldName		::= #the name of an index field, which is UN_TOKENIZED and contains a single term per document
#    sortType			::= 'AUTO' (default) | 'DOC' | 'SCORE' | 'INT' | 'FLOAT' | 'STRING'
#    locale				::= language['-'country['-'variant]]
#    comparatorClass    ::= package-path'.'className['('param['-'param]*')']
#    reverse			::= 'false' (default) | 'true' | 'reverse'

# Briefly, one or more sortFields will determine the sequence of search results,
# as defined either by sortType or by locale, and it may be in reverse.

# If no sortFieldsValue is given, then this code from GSearch 1.1.1 is run

#   Hits hits = searcher.search(query); // in dk.defxws.fgslucene.Statement.java
  
# where the sequence is by default.

# If a sortFieldsValue is given, then this code is run

#   Hits hits = searcher.search(query, sort); 

# where sort is an instance of org.apache.lucene.search.Sort, see

#   http://lucene.apache.org/java/2_2_0/api/index.html

# The sortType, locale and reverse values come from the class constructors 
# for org.apache.lucene.search.SortField.


#fgsindex.untokenizedFields		= list of index fields created as UN_TOKENIZED
###########################
#									Effect: during search the KeywordAnalyzer is used for untokenized fields,
#									while the fgsindex.analyzer is used for other fields.
#									Only untokenized fields, which do not occur in every index document,
#									need be listed here.
# example:

#fgsindex.untokenizedFields		= fgs.contentModel uf1 uf2


# snippets
##########
#fgsindex.snippetBegin	= <span class=\"highlight\">
## this value is default if not specified
#fgsindex.snippetEnd	= </span>
## this value is default if not specified


# optimization  see e.g. http://www.onjava.com/pub/a/onjava/2003/03/05/lucene.html
##############
# fgsindex.mergeFactor		= 10
## 10 is default if not specified
# fgsindex.maxBufferedDocs	= 10
## 10 is default if not specified
# from http://lucene.apache.org/java/2_2_0/api/IndexWriter.html :
## mergeFactor
##   determines how often segment indices are merged by addDocument(). 
##   With smaller values, less RAM is used while indexing, and searches on unoptimized indices are faster, 
##   but indexing speed is slower. With larger values, more RAM is used during indexing, 
##   and while searches on unoptimized indices are slower, indexing is faster. 
##   Thus larger values (> 10) are best for batch index creation, 
##   and smaller values (< 10) for indices that are interactively maintained.
## maxBufferedDocs 
##   determines the minimal number of documents required 
##   before the buffered in-memory documents are merged and a new Segment is created. 
##   Since Documents are merged in a RAMDirectory, large value gives faster indexing. 
##   At the same time, mergeFactor limits the number of files open in a FSDirectory.

#  ...?operation=updateIndex&action=optimize
##        will perform IndexWriter.optimize()
##        which merges all segments together into a single segment, optimizing an index for search.
